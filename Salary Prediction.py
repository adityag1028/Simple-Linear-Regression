#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Apr 15 15:30:51 2024

@author: ayjeeg
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# lets import dataset/dataframe

df = pd.read_csv(r'/Users/ayjeeg/Downloads/All ML assignments/Project-2.Salary Prediction/Salary_Data.csv')
df

# lets split the data to dependent and independent variable

# dependent ( y is always dependent)
y = df.iloc[ : , 1].values

#independent
x = df.iloc[ : , :-1].values

# since the dependent variable is contineous we choose regression algo
# since we are computing for only 2 attributes we go for simple linear reg

# split the data into 80-20
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split( x, y, test_size=0.2, random_state=0)

# lets call SLR algo from sklearn

from sklearn.linear_model import LinearRegression
regressor = LinearRegression()

# lets build SLR reg model regressor
regressor.fit(x_train, y_train)

# for testing the model we create a predicted table
y_pred = regressor.predict(x_test)

# lets visualize train data point

plt.scatter(x_train, y_train, color = 'red')
plt.plot(x_train, regressor.predict(x_train), color = 'blue')
plt.title('salary vs exp(Training set)')
plt.xlabel('YOE')
plt.ylabel('Salary')
plt.show()

# visualize test data points

plt.scatter(x_test, y_test, color = 'blue')
plt.plot(x_test, regressor.predict(x_test), color = 'red')
plt.title('salary vs exp(Test set)')
plt.xlabel('YOE')
plt.ylabel('Salary')
plt.show()

# slope is generated from linear reg algo with filter

m = regressor.coef_

# intercept will also be generated by model

c = regressor.intercept_

# predicting or forecasting the data which is not trained

y_12 = 9312*12 + 26780  # 9312 coz; regressor.coef_ is 9312
y_12

y_20 = 9312*20 + 26780 # 26780 coz; regressor.intercept_ is 26780
y_20

# to check overfitting (low bias high varience)

bias = regressor.score(x_train, y_train)
bias

# to check under fitting (high bias low varience)

varience = regressor.score(x_test, y_test)
varience

# deployment in flask
# mlops (azure, googlecolab, heroku, kubernates)








